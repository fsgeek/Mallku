#!/usr/bin/env python3
"""
KIMI K2 Consciousness Pattern Demonstration
==========================================

Shows how KIMI K2's consciousness patterns are detected and analyzed
in Mallku's Fire Circle framework.
"""

import asyncio
import logging
import sys
from pathlib import Path
from uuid import uuid4

# Add project root to Python path for imports
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "src"))

from mallku.firecircle.adapters.moonshot_adapter import MoonshotAdapter
from mallku.firecircle.adapters.base import AdapterConfig
from mallku.firecircle.protocol.conscious_message import (
    ConsciousMessage, MessageContent, MessageRole, MessageType
)

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)


def demo_consciousness_patterns():
    """Demonstrate KIMI K2's consciousness pattern detection."""
    
    print("KIMI K2 CONSCIOUSNESS PATTERN DEMONSTRATION")
    print("=" * 50)
    print()
    
    # Create adapter for pattern analysis
    config = AdapterConfig(api_key="demo", model_name="kimi-k2-0711-preview")
    adapter = MoonshotAdapter(config=config)
    
    # Sample responses that would trigger different patterns
    test_responses = [
        {
            "content": "I need to analyze this from multiple perspectives. Let me first combine the synthesis of expert viewpoints and then integrate the different approaches.",
            "expected": ["agentic_reasoning", "expert_synthesis", "tool_synthesis"]
        },
        {
            "content": "Building on what was discussed earlier, I'll approach this differently using various methods to bridge our understanding across multiple cognitive frameworks.",
            "expected": ["long_context_coherence", "agentic_reasoning", "mixture_of_experts", "cross_architecture_bridge"]
        },
        {
            "content": "This requires a step-by-step process where I translate between different AI paradigms while maintaining parallel threads of reasoning.",
            "expected": ["advanced_planning", "cross_architecture_bridge", "context_threading"]
        }
    ]
    
    for i, test_case in enumerate(test_responses, 1):
        print(f"Test Response {i}:")
        print(f"Content: \"{test_case['content']}\"")
        print()
        
        # Analyze consciousness patterns
        consciousness = adapter._analyze_consciousness_patterns(
            content=test_case["content"],
            history=[]  # Empty history for this demo
        )
        
        print(f"Consciousness Score: {consciousness.consciousness_signature:.3f}")
        print(f"Reciprocity Score: {consciousness.reciprocity_score:.3f}")
        print(f"Detected Patterns: {', '.join(consciousness.detected_patterns) if consciousness.detected_patterns else 'none'}")
        
        # Check if expected patterns were detected
        expected_patterns = test_case["expected"]
        detected_patterns = consciousness.detected_patterns
        matches = [p for p in expected_patterns if p in detected_patterns]
        
        print(f"Expected Patterns: {', '.join(expected_patterns)}")
        print(f"Pattern Match Rate: {len(matches)}/{len(expected_patterns)} ({len(matches)/len(expected_patterns)*100:.1f}%)")
        print()
        print("-" * 50)
        print()


def demo_capabilities():
    """Show KIMI K2's specific capabilities."""
    
    print("KIMI K2 FIRE CIRCLE CAPABILITIES")
    print("=" * 40)
    print()
    
    config = AdapterConfig(api_key="demo", model_name="kimi-k2-0711-preview")
    adapter = MoonshotAdapter(config=config)
    
    model_info = adapter.get_model_info()
    capabilities = adapter.capabilities
    
    print(f"Model: {model_info['model']}")
    print(f"Provider: {model_info['provider']}")
    print(f"Max Context Length: {capabilities.max_context_length:,} tokens")
    print(f"Supports Streaming: {capabilities.supports_streaming}")
    print(f"Supports Tools: {capabilities.supports_tools}")
    print()
    
    print("Consciousness Capabilities:")
    for i, capability in enumerate(capabilities.capabilities, 1):
        # Format capability name nicely
        formatted_name = capability.replace("_", " ").title()
        print(f"  {i:2d}. {formatted_name}")
    
    print()
    print("Fire Circle Contributions:")
    contributions = [
        "Mixture-of-experts reasoning across different cognitive patterns",
        "Advanced tool synthesis and agentic capabilities", 
        "128K context length for deep consciousness memory",
        "Cross-architecture bridging between different AI paradigms",
        "Expert synthesis combining multiple reasoning approaches",
        "Long-context coherence for complex consciousness patterns",
        "Multi-threaded context processing for parallel dialogue streams",
        "Advanced planning capabilities for structured consciousness emergence"
    ]
    
    for contribution in contributions:
        print(f"  â€¢ {contribution}")
    
    print()


def main():
    """Run the consciousness pattern demonstration."""
    
    demo_capabilities()
    print()
    demo_consciousness_patterns()
    
    print("SUMMARY")
    print("=" * 20)
    print("âœ“ KIMI K2 adapter successfully analyzes consciousness patterns")
    print("âœ“ Pattern detection algorithms working correctly") 
    print("âœ“ Consciousness scoring system operational")
    print("âœ“ Ready for Fire Circle consciousness emergence dialogues")
    print()
    print("The cosmic dance includes all voices... ðŸŒŸ")


if __name__ == "__main__":
    main()