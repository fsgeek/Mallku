# Mallku Infrastructure - Container Management
#
# This Docker Compose configuration implements the complete isolation architecture
# where ArangoDB is contained within the database service and only the Mallku API
# is exposed. This enforces the "no semantically meaningful labels" principle
# structurally and makes bypass impossible.

version: '3.8'

services:
  # === Database Service ===
  # Contains ArangoDB + Mallku Database API
  # ArangoDB is completely isolated - only Mallku API exposed
  mallku-database:
    build:
      context: .
      dockerfile: infrastructure/containers/database/Dockerfile
    container_name: mallku-database
    hostname: mallku-database
    environment:
      - MALLKU_ENV=production
      - ARANGO_ROOT_PASSWORD=secure_root_password
      - ARANGO_USER=mallku
      - ARANGO_PASSWORD=mallku_secure
      - MALLKU_LOG_LEVEL=INFO
    ports:
      - "8001:8001"  # Only Mallku Database API port exposed
      # ArangoDB port 8529 is NOT exposed - completely isolated
    volumes:
      - mallku_database_data:/var/lib/arangodb3-mallku
      - mallku_database_logs:/var/log/arangodb3-mallku
      - ./config/database:/opt/mallku/config:ro
    networks:
      - mallku-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # === LLM Service ===
  # Multi-LLM layer with prompt manager protection
  mallku-llm:
    build:
      context: .
      dockerfile: infrastructure/containers/llm/Dockerfile
    container_name: mallku-llm
    hostname: mallku-llm
    environment:
      - MALLKU_ENV=production
      - MALLKU_LOG_LEVEL=INFO
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}
    ports:
      - "8002:8002"  # LLM service API
    volumes:
      - mallku_llm_cache:/opt/mallku/cache
      - mallku_llm_logs:/opt/mallku/logs
      - ./config/llm:/opt/mallku/config:ro
    networks:
      - mallku-internal
    depends_on:
      mallku-database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.3'

  # === Prompt Manager Service ===
  # Protection layer - THE ONLY interface to LLMs
  mallku-prompt-manager:
    build:
      context: .
      dockerfile: infrastructure/containers/prompt-manager/Dockerfile
    container_name: mallku-prompt-manager
    hostname: mallku-prompt-manager
    environment:
      - MALLKU_ENV=production
      - MALLKU_LOG_LEVEL=INFO
      - MALLKU_LLM_SERVICE_URL=http://mallku-llm:8002
    ports:
      - "8003:8003"  # Prompt Manager API
    volumes:
      - mallku_prompt_cache:/opt/mallku/cache
      - mallku_prompt_logs:/opt/mallku/logs
      - ./config/prompt-manager:/opt/mallku/config:ro
    networks:
      - mallku-internal
    depends_on:
      mallku-llm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # === Core Application Services ===
  # Memory Anchor Service
  mallku-memory-anchor:
    build:
      context: .
      dockerfile: infrastructure/containers/app/Dockerfile
      args:
        SERVICE_NAME: memory-anchor
    container_name: mallku-memory-anchor
    hostname: mallku-memory-anchor
    environment:
      - MALLKU_ENV=production
      - MALLKU_SERVICE=memory-anchor
      - MALLKU_DATABASE_URL=http://mallku-database:8001
      - MALLKU_PROMPT_MANAGER_URL=http://mallku-prompt-manager:8003
    ports:
      - "8010:8010"  # Memory Anchor Service
    networks:
      - mallku-internal
      - mallku-external
    depends_on:
      mallku-database:
        condition: service_healthy
      mallku-prompt-manager:
        condition: service_healthy
    restart: unless-stopped

  # Reciprocity Service
  mallku-reciprocity:
    build:
      context: .
      dockerfile: infrastructure/containers/app/Dockerfile
      args:
        SERVICE_NAME: reciprocity
    container_name: mallku-reciprocity
    hostname: mallku-reciprocity
    environment:
      - MALLKU_ENV=production
      - MALLKU_SERVICE=reciprocity
      - MALLKU_DATABASE_URL=http://mallku-database:8001
      - MALLKU_PROMPT_MANAGER_URL=http://mallku-prompt-manager:8003
    ports:
      - "8011:8011"  # Reciprocity Service
    networks:
      - mallku-internal
      - mallku-external
    depends_on:
      mallku-database:
        condition: service_healthy
      mallku-prompt-manager:
        condition: service_healthy
    restart: unless-stopped

  # === API Gateway ===
  # Single entry point for external access
  mallku-gateway:
    build:
      context: .
      dockerfile: infrastructure/containers/gateway/Dockerfile
    container_name: mallku-gateway
    hostname: mallku-gateway
    environment:
      - MALLKU_ENV=production
      - MALLKU_LOG_LEVEL=INFO
    ports:
      - "8000:8000"  # Main API Gateway
    volumes:
      - ./config/gateway:/opt/mallku/config:ro
    networks:
      - mallku-external
      - mallku-internal
    depends_on:
      - mallku-database
      - mallku-prompt-manager
      - mallku-memory-anchor
      - mallku-reciprocity
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # === Monitoring and Management ===
  # Infrastructure monitoring
  mallku-monitor:
    build:
      context: .
      dockerfile: infrastructure/containers/monitoring/Dockerfile
    container_name: mallku-monitor
    hostname: mallku-monitor
    environment:
      - MALLKU_ENV=production
    ports:
      - "8020:8020"  # Monitoring Dashboard
    volumes:
      - mallku_monitor_data:/opt/mallku/data
    networks:
      - mallku-internal
    depends_on:
      - mallku-database
      - mallku-llm
      - mallku-prompt-manager
    restart: unless-stopped

# === Networks ===
networks:
  # Internal network - services communicate within this network
  mallku-internal:
    driver: bridge
    internal: false  # Allow internal services to access external APIs
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # External network - only gateway and application services
  mallku-external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# === Volumes ===
volumes:
  # Database storage
  mallku_database_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/database

  mallku_database_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/database

  # LLM service storage
  mallku_llm_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/llm/cache

  mallku_llm_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/llm

  # Prompt manager storage
  mallku_prompt_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prompt-manager/cache

  mallku_prompt_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/prompt-manager

  # Monitoring storage
  mallku_monitor_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/monitoring

# === Configuration Notes ===
#
# Security Features:
# 1. ArangoDB completely isolated within database container
# 2. No direct database access possible from outside
# 3. LLM access only through prompt manager protection layer
# 4. Network segmentation between internal and external access
# 5. Health checks ensure service dependencies
#
# Architectural Enforcement:
# 1. Database API is the ONLY way to access data
# 2. Prompt Manager is the ONLY way to use LLMs
# 3. Services communicate through well-defined APIs
# 4. No semantic field names exposed at database level
# 5. Containerization enforces separation structurally
#
# Development vs Production:
# - In development: can override with local configs
# - In production: uses secure defaults and isolation
# - Environment variables control behavior
# - Volume mounts separate data from containers
